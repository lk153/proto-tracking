syntax = "proto3";

package tracking.services;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "tracking/entities/task.proto";

option go_package = "github.com/lk153/proto-tracking-gen/go/services;services";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "Task API",
    version : "1.0",
    description : "Task API",
  },
  host : "127.0.0.1:8080",
  schemes : HTTPS,
  consumes : "application/json",
  produces : "application/json",
  responses : {
    key : "404",
    value : {
      description : "Returned when the resource does not exist.",
      schema : {
        json_schema : {
          type : STRING,
        },
      },
    },
  },
  responses : {
    key : "500",
    value : {
      description : "Server error",
      headers : {
        key : "X-Correlation-Id",
        value : {
          description : "Unique event identifier for server requests",
          type : "string",
          format : "uuid",
          default : '"2438ac3c-37eb-4902-adef-ed16b4431030"',
          pattern : "^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-["
                    "0-9A-F]{12}$",
        },
      },
    },
  },
};

message TaskServiceGetSingleRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema : {
      title : "Get Task",
      description : "Get task",
    },
    example : "{\"id\":1}",
  };

  uint64 id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message TaskServiceGetSingleResponse { tracking.entities.TaskInfo data = 1; }

message TaskServiceGetRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema : {
      title : "Get List Of Task",
      description : "Get list of task",
    },
    example : "{\"ids\":[1, 2, 3], \"page\": 1, \"limit\": 20}",
  };

  repeated uint64 ids = 1 [ (validate.rules).repeated .min_items = 1 ];
  uint32 page = 2 [ (validate.rules).uint32.gt = 0 ];
  uint32 limit = 3 [ (validate.rules).uint32.gt = 0 ];
}

message TaskServiceGetResponse { repeated tracking.entities.TaskInfo data = 1; }

message TaskServiceCreateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema : {
      title : "Create Task",
      description : "Create task",
    },
    example : "{\"name\": \"reading book\", \"startAt\": \"2021-06-30 "
              "16:00:49\", \"endAt\": \"2021-06-30 16:00:49\", \"status\": 1}",
  };

  tracking.entities.TaskInfo data = 1;
}

message TaskServiceCreateResponse { tracking.entities.TaskInfo data = 1; }

service TaskService {
  rpc GetSingle(TaskServiceGetSingleRequest)
      returns (TaskServiceGetSingleResponse) {
    option (google.api.http) = {
      get : "/v1/task/{id}",
    };
  }

  rpc Get(TaskServiceGetRequest) returns (TaskServiceGetResponse) {
    option (google.api.http) = {
      get : "/v1/tasks",
    };
  }

  rpc Create(TaskServiceCreateRequest) returns (TaskServiceCreateResponse) {
    option (google.api.http) = {
      post : "/v1/task",
      body : "*",
    };
  }
}
